# -*- coding: utf-8 -*-
"""Flatiron Workshop 2/8/20

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f2U79U3_8KkhefyWPtOUpisDd_B6inOK
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans

# data location: http://bit.ly/fis311data
# import data
data = pd.read_csv('https://opendata.arcgis.com/datasets/98b7406def094fa59838f14beb1b8c81_10.csv')

data.head()

data.info()

date_cols = ['ADDDATE', 'RESOLUTIONDATE', 'SERVICEDUEDATE', 'SERVICEORDERDATE', 'INSPECTIONDATE']
data[date_cols] = data[date_cols].apply(pd.to_datetime)
data.info()

data.SERVICECODEDESCRIPTION.value_counts().head(30)

"""Where are Out-of-Towners Parking?"""

oos = data[data.SERVICECODEDESCRIPTION == 'Out of State Parking Violation (ROSA)']
oos.info()

oos.STATUS_CODE.value_counts()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

oos.plot(x='LATITUDE', y='LONGITUDE', kind='scatter')

sns.set(rc={'figure.figsize':(14,8)})
sns.scatterplot(x='LONGITUDE', y='LATITUDE',
                hue='WARD', data=oos,
                palette=sns.color_palette('Set1',8))

oos.ADDDATE.dt.hour.value_counts().sort_index().plot.bar()

def plot_value_counts(ser):
  ser.value_counts().sort_index().plot.bar()

plot_value_counts(oos.ADDDATE.dt.month)

"""Graffiti"""

graf = data[data.SERVICECODEDESCRIPTION=='Graffiti Removal']
graf.info()

graf.STATUS_CODE.value_counts()

graf.WARD.value_counts()

graf.plot(x='LONGITUDE', y='LATITUDE', kind='scatter')

sns.scatterplot(x='LONGITUDE', y='LATITUDE',
                hue='WARD', data=graf,
                palette=sns.color_palette('Set1',8))

plot_value_counts(graf.ADDDATE.dt.hour)

"""Making predictions about Bulk Collection 311 request volume"""

bulk_df = data[data.SERVICECODEDESCRIPTION == 'Bulk Collection']
bulk_df = bulk_df[['SERVICECALLCOUNT', 'ADDDATE']].set_index('ADDDATE')
bulk_df.info()

grouped_df = bulk_df.resample('1w').sum() #only works with dt index
grouped_df = grouped_df.reset_index()
grouped_df = grouped_df.reset_index()
grouped_df.columns = ['Week Number', 'Date', 'Call Count']
grouped_df.head()

model = PolynomialFeatures(degree=2)
xp = model.fit_transform(grouped_df[['Week Number']])
lm = LinearRegression()
lm.fit(xp, grouped_df['Call Count'])
grouped_df['predictions'] = lm.predict(xp)
grouped_df.head()

# model = PolynomialFeatures(degree=2).fit_transform(grouped_df[['Week Number']])
# lm = LinearRegression().fit(model, grouped_df['Call Count'])
# grouped_df['predictions'] = lm.predict(model)

sns.scatterplot(x='Week Number', y='Call Count', data=grouped_df)
sns.lineplot(x='Week Number', y='predictions', data=grouped_df)
plt.ylabel('Call Count')
plt.title('Predicting Call Count by Week')

"""Predicting where graffiti cleaners should go"""

graf_cluster = graf[['X','Y']].copy()
graf_cluster.head()

num_graf_cleaners = 5
kmeans = KMeans(n_clusters=num_graf_cleaners, random_state=0).fit(graf_cluster)
kmeans.labels_

graf_cluster['labels'] = kmeans.labels_
graf_cluster.labels.value_counts()

sns.scatterplot(x='X', y='Y',
                hue='WARD', data=graf,
                palette=sns.color_palette('Set1',8))

sns.scatterplot(x='X', y='Y',
                hue='labels', data=graf_cluster,
                palette=sns.color_palette('Set1', num_graf_cleaners))